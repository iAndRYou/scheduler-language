# Generated from ../Scheduler.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,65,526,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,176,8,3,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,203,8,4,1,5,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,
        1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
        1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
        1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,
        1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,
        1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,
        1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,
        1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,56,3,56,419,8,56,
        1,56,4,56,422,8,56,11,56,12,56,423,1,57,1,57,1,57,1,57,1,57,1,57,
        1,57,1,57,1,57,3,57,435,8,57,1,58,1,58,5,58,439,8,58,10,58,12,58,
        442,9,58,1,58,1,58,1,59,3,59,447,8,59,1,59,1,59,1,59,1,59,1,59,3,
        59,454,8,59,1,59,1,59,3,59,458,8,59,1,59,1,59,1,59,3,59,463,8,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,60,3,60,472,8,60,1,60,1,60,1,60,
        3,60,477,8,60,1,60,1,60,1,60,1,60,1,61,4,61,484,8,61,11,61,12,61,
        485,1,61,1,61,1,62,1,62,5,62,492,8,62,10,62,12,62,495,9,62,1,63,
        1,63,1,63,1,63,5,63,501,8,63,10,63,12,63,504,9,63,1,63,3,63,507,
        8,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,5,64,517,8,64,10,64,
        12,64,520,9,64,1,64,1,64,1,64,1,64,1,64,2,502,518,0,65,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
        97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,
        58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,1,0,11,1,0,48,
        57,1,0,34,34,1,0,49,57,1,0,49,50,1,0,48,49,1,0,48,50,1,0,48,51,1,
        0,48,53,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,549,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
        0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
        0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,
        0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
        1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
        0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
        0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,1,131,1,0,0,0,3,133,1,0,0,0,5,
        144,1,0,0,0,7,175,1,0,0,0,9,202,1,0,0,0,11,204,1,0,0,0,13,210,1,
        0,0,0,15,214,1,0,0,0,17,222,1,0,0,0,19,227,1,0,0,0,21,229,1,0,0,
        0,23,231,1,0,0,0,25,233,1,0,0,0,27,235,1,0,0,0,29,238,1,0,0,0,31,
        241,1,0,0,0,33,243,1,0,0,0,35,245,1,0,0,0,37,248,1,0,0,0,39,251,
        1,0,0,0,41,255,1,0,0,0,43,258,1,0,0,0,45,262,1,0,0,0,47,265,1,0,
        0,0,49,267,1,0,0,0,51,269,1,0,0,0,53,271,1,0,0,0,55,273,1,0,0,0,
        57,275,1,0,0,0,59,277,1,0,0,0,61,279,1,0,0,0,63,281,1,0,0,0,65,283,
        1,0,0,0,67,297,1,0,0,0,69,301,1,0,0,0,71,308,1,0,0,0,73,315,1,0,
        0,0,75,319,1,0,0,0,77,325,1,0,0,0,79,336,1,0,0,0,81,339,1,0,0,0,
        83,342,1,0,0,0,85,346,1,0,0,0,87,349,1,0,0,0,89,354,1,0,0,0,91,359,
        1,0,0,0,93,363,1,0,0,0,95,369,1,0,0,0,97,376,1,0,0,0,99,382,1,0,
        0,0,101,384,1,0,0,0,103,386,1,0,0,0,105,395,1,0,0,0,107,401,1,0,
        0,0,109,407,1,0,0,0,111,412,1,0,0,0,113,418,1,0,0,0,115,434,1,0,
        0,0,117,436,1,0,0,0,119,453,1,0,0,0,121,476,1,0,0,0,123,483,1,0,
        0,0,125,489,1,0,0,0,127,496,1,0,0,0,129,512,1,0,0,0,131,132,5,59,
        0,0,132,2,1,0,0,0,133,134,5,83,0,0,134,135,5,84,0,0,135,136,5,65,
        0,0,136,137,5,82,0,0,137,138,5,84,0,0,138,139,5,32,0,0,139,140,5,
        68,0,0,140,141,5,65,0,0,141,142,5,84,0,0,142,143,5,69,0,0,143,4,
        1,0,0,0,144,145,5,69,0,0,145,146,5,78,0,0,146,147,5,68,0,0,147,148,
        5,32,0,0,148,149,5,68,0,0,149,150,5,65,0,0,150,151,5,84,0,0,151,
        152,5,69,0,0,152,6,1,0,0,0,153,154,5,83,0,0,154,155,5,84,0,0,155,
        156,5,65,0,0,156,157,5,82,0,0,157,176,5,84,0,0,158,159,5,69,0,0,
        159,160,5,78,0,0,160,176,5,68,0,0,161,162,5,83,0,0,162,163,5,85,
        0,0,163,164,5,66,0,0,164,165,5,74,0,0,165,166,5,69,0,0,166,167,5,
        67,0,0,167,176,5,84,0,0,168,169,5,84,0,0,169,170,5,69,0,0,170,171,
        5,65,0,0,171,172,5,67,0,0,172,173,5,72,0,0,173,174,5,69,0,0,174,
        176,5,82,0,0,175,153,1,0,0,0,175,158,1,0,0,0,175,161,1,0,0,0,175,
        168,1,0,0,0,176,8,1,0,0,0,177,178,5,73,0,0,178,179,5,78,0,0,179,
        203,5,84,0,0,180,181,5,66,0,0,181,182,5,79,0,0,182,183,5,79,0,0,
        183,203,5,76,0,0,184,185,5,83,0,0,185,186,5,84,0,0,186,187,5,82,
        0,0,187,188,5,73,0,0,188,189,5,78,0,0,189,203,5,71,0,0,190,191,5,
        68,0,0,191,192,5,65,0,0,192,193,5,84,0,0,193,203,5,69,0,0,194,195,
        5,84,0,0,195,196,5,73,0,0,196,197,5,77,0,0,197,203,5,69,0,0,198,
        199,5,86,0,0,199,200,5,79,0,0,200,201,5,73,0,0,201,203,5,68,0,0,
        202,177,1,0,0,0,202,180,1,0,0,0,202,184,1,0,0,0,202,190,1,0,0,0,
        202,194,1,0,0,0,202,198,1,0,0,0,203,10,1,0,0,0,204,205,5,67,0,0,
        205,206,5,76,0,0,206,207,5,65,0,0,207,208,5,83,0,0,208,209,5,83,
        0,0,209,12,1,0,0,0,210,211,5,68,0,0,211,212,5,65,0,0,212,213,5,89,
        0,0,213,14,1,0,0,0,214,215,5,67,0,0,215,216,5,76,0,0,216,217,5,65,
        0,0,217,218,5,83,0,0,218,219,5,83,0,0,219,220,5,69,0,0,220,221,5,
        83,0,0,221,16,1,0,0,0,222,223,5,68,0,0,223,224,5,65,0,0,224,225,
        5,89,0,0,225,226,5,83,0,0,226,18,1,0,0,0,227,228,5,42,0,0,228,20,
        1,0,0,0,229,230,5,47,0,0,230,22,1,0,0,0,231,232,5,43,0,0,232,24,
        1,0,0,0,233,234,5,45,0,0,234,26,1,0,0,0,235,236,5,61,0,0,236,237,
        5,61,0,0,237,28,1,0,0,0,238,239,5,33,0,0,239,240,5,61,0,0,240,30,
        1,0,0,0,241,242,5,60,0,0,242,32,1,0,0,0,243,244,5,62,0,0,244,34,
        1,0,0,0,245,246,5,60,0,0,246,247,5,61,0,0,247,36,1,0,0,0,248,249,
        5,62,0,0,249,250,5,61,0,0,250,38,1,0,0,0,251,252,5,65,0,0,252,253,
        5,78,0,0,253,254,5,68,0,0,254,40,1,0,0,0,255,256,5,79,0,0,256,257,
        5,82,0,0,257,42,1,0,0,0,258,259,5,78,0,0,259,260,5,79,0,0,260,261,
        5,84,0,0,261,44,1,0,0,0,262,263,5,73,0,0,263,264,5,78,0,0,264,46,
        1,0,0,0,265,266,5,64,0,0,266,48,1,0,0,0,267,268,5,40,0,0,268,50,
        1,0,0,0,269,270,5,41,0,0,270,52,1,0,0,0,271,272,5,91,0,0,272,54,
        1,0,0,0,273,274,5,93,0,0,274,56,1,0,0,0,275,276,5,46,0,0,276,58,
        1,0,0,0,277,278,5,44,0,0,278,60,1,0,0,0,279,280,5,58,0,0,280,62,
        1,0,0,0,281,282,5,61,0,0,282,64,1,0,0,0,283,284,5,67,0,0,284,285,
        5,79,0,0,285,286,5,76,0,0,286,287,5,76,0,0,287,288,5,69,0,0,288,
        289,5,67,0,0,289,290,5,84,0,0,290,291,5,73,0,0,291,292,5,79,0,0,
        292,293,5,78,0,0,293,294,5,32,0,0,294,295,5,79,0,0,295,296,5,70,
        0,0,296,66,1,0,0,0,297,298,5,65,0,0,298,299,5,68,0,0,299,300,5,68,
        0,0,300,68,1,0,0,0,301,302,5,85,0,0,302,303,5,80,0,0,303,304,5,68,
        0,0,304,305,5,65,0,0,305,306,5,84,0,0,306,307,5,69,0,0,307,70,1,
        0,0,0,308,309,5,68,0,0,309,310,5,69,0,0,310,311,5,76,0,0,311,312,
        5,69,0,0,312,313,5,84,0,0,313,314,5,69,0,0,314,72,1,0,0,0,315,316,
        5,71,0,0,316,317,5,69,0,0,317,318,5,84,0,0,318,74,1,0,0,0,319,320,
        5,87,0,0,320,321,5,72,0,0,321,322,5,69,0,0,322,323,5,82,0,0,323,
        324,5,69,0,0,324,76,1,0,0,0,325,326,5,83,0,0,326,327,5,65,0,0,327,
        328,5,84,0,0,328,329,5,73,0,0,329,330,5,83,0,0,330,331,5,70,0,0,
        331,332,5,89,0,0,332,333,5,73,0,0,333,334,5,78,0,0,334,335,5,71,
        0,0,335,78,1,0,0,0,336,337,5,65,0,0,337,338,5,84,0,0,338,80,1,0,
        0,0,339,340,5,79,0,0,340,341,5,78,0,0,341,82,1,0,0,0,342,343,5,68,
        0,0,343,344,5,69,0,0,344,345,5,70,0,0,345,84,1,0,0,0,346,347,5,73,
        0,0,347,348,5,70,0,0,348,86,1,0,0,0,349,350,5,69,0,0,350,351,5,76,
        0,0,351,352,5,73,0,0,352,353,5,70,0,0,353,88,1,0,0,0,354,355,5,69,
        0,0,355,356,5,76,0,0,356,357,5,83,0,0,357,358,5,69,0,0,358,90,1,
        0,0,0,359,360,5,70,0,0,360,361,5,79,0,0,361,362,5,82,0,0,362,92,
        1,0,0,0,363,364,5,87,0,0,364,365,5,72,0,0,365,366,5,73,0,0,366,367,
        5,76,0,0,367,368,5,69,0,0,368,94,1,0,0,0,369,370,5,82,0,0,370,371,
        5,69,0,0,371,372,5,84,0,0,372,373,5,85,0,0,373,374,5,82,0,0,374,
        375,5,78,0,0,375,96,1,0,0,0,376,377,5,66,0,0,377,378,5,82,0,0,378,
        379,5,69,0,0,379,380,5,65,0,0,380,381,5,75,0,0,381,98,1,0,0,0,382,
        383,5,123,0,0,383,100,1,0,0,0,384,385,5,125,0,0,385,102,1,0,0,0,
        386,387,5,68,0,0,387,388,5,73,0,0,388,389,5,83,0,0,389,390,5,84,
        0,0,390,391,5,73,0,0,391,392,5,78,0,0,392,393,5,67,0,0,393,394,5,
        84,0,0,394,104,1,0,0,0,395,396,5,80,0,0,396,397,5,82,0,0,397,398,
        5,73,0,0,398,399,5,78,0,0,399,400,5,84,0,0,400,106,1,0,0,0,401,402,
        5,68,0,0,402,403,5,65,0,0,403,404,5,84,0,0,404,405,5,69,0,0,405,
        406,5,83,0,0,406,108,1,0,0,0,407,408,5,76,0,0,408,409,5,79,0,0,409,
        410,5,65,0,0,410,411,5,68,0,0,411,110,1,0,0,0,412,413,5,68,0,0,413,
        414,5,85,0,0,414,415,5,77,0,0,415,416,5,80,0,0,416,112,1,0,0,0,417,
        419,5,45,0,0,418,417,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,
        422,7,0,0,0,421,420,1,0,0,0,422,423,1,0,0,0,423,421,1,0,0,0,423,
        424,1,0,0,0,424,114,1,0,0,0,425,426,5,84,0,0,426,427,5,114,0,0,427,
        428,5,117,0,0,428,435,5,101,0,0,429,430,5,70,0,0,430,431,5,97,0,
        0,431,432,5,108,0,0,432,433,5,115,0,0,433,435,5,101,0,0,434,425,
        1,0,0,0,434,429,1,0,0,0,435,116,1,0,0,0,436,440,5,34,0,0,437,439,
        8,1,0,0,438,437,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,
        1,0,0,0,441,443,1,0,0,0,442,440,1,0,0,0,443,444,5,34,0,0,444,118,
        1,0,0,0,445,447,5,48,0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,448,
        1,0,0,0,448,454,7,2,0,0,449,450,7,3,0,0,450,454,7,0,0,0,451,452,
        5,51,0,0,452,454,7,4,0,0,453,446,1,0,0,0,453,449,1,0,0,0,453,451,
        1,0,0,0,454,455,1,0,0,0,455,462,5,47,0,0,456,458,5,48,0,0,457,456,
        1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,459,463,7,2,0,0,460,461,
        5,49,0,0,461,463,7,5,0,0,462,457,1,0,0,0,462,460,1,0,0,0,463,464,
        1,0,0,0,464,465,5,47,0,0,465,466,7,0,0,0,466,467,7,0,0,0,467,468,
        7,0,0,0,468,469,7,0,0,0,469,120,1,0,0,0,470,472,7,4,0,0,471,470,
        1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,477,7,0,0,0,474,475,
        5,50,0,0,475,477,7,6,0,0,476,471,1,0,0,0,476,474,1,0,0,0,477,478,
        1,0,0,0,478,479,5,58,0,0,479,480,7,7,0,0,480,481,7,0,0,0,481,122,
        1,0,0,0,482,484,7,8,0,0,483,482,1,0,0,0,484,485,1,0,0,0,485,483,
        1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,488,6,61,0,0,488,124,
        1,0,0,0,489,493,7,9,0,0,490,492,7,10,0,0,491,490,1,0,0,0,492,495,
        1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,126,1,0,0,0,495,493,
        1,0,0,0,496,497,5,47,0,0,497,498,5,47,0,0,498,502,1,0,0,0,499,501,
        9,0,0,0,500,499,1,0,0,0,501,504,1,0,0,0,502,503,1,0,0,0,502,500,
        1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,505,507,5,13,0,0,506,505,
        1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,509,5,10,0,0,509,510,
        1,0,0,0,510,511,6,63,1,0,511,128,1,0,0,0,512,513,5,47,0,0,513,514,
        5,42,0,0,514,518,1,0,0,0,515,517,9,0,0,0,516,515,1,0,0,0,517,520,
        1,0,0,0,518,519,1,0,0,0,518,516,1,0,0,0,519,521,1,0,0,0,520,518,
        1,0,0,0,521,522,5,42,0,0,522,523,5,47,0,0,523,524,1,0,0,0,524,525,
        6,64,1,0,525,130,1,0,0,0,18,0,175,202,418,423,434,440,446,453,457,
        462,471,476,485,493,502,506,518,2,6,0,0,0,1,0
    ]

class SchedulerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    CLASS_ATTRIBUTE = 4
    TYPENAME = 5
    CLASSNAME = 6
    DAYNAME = 7
    CLASSESTOKEN = 8
    DAYSTOKEN = 9
    MULTIPLY = 10
    DIVIDE = 11
    ADD = 12
    SUBTRACT = 13
    EQUAL = 14
    NOT_EQUAL = 15
    LESS_THAN = 16
    GREATER_THAN = 17
    LESS_THAN_OR_EQUAL = 18
    GREATER_THAN_OR_EQUAL = 19
    AND = 20
    OR = 21
    NOT = 22
    IN = 23
    OVERLAP = 24
    OPEN_PAREN = 25
    CLOSE_PAREN = 26
    OPEN_BRACKET = 27
    CLOSE_BRACKET = 28
    DOT = 29
    COMMA = 30
    COLON = 31
    SINGLEEQUAL = 32
    COLLECTION_OF = 33
    ADD_CANVA = 34
    UPDATE_CANVA = 35
    DELETE_CANVA = 36
    GET_CANVA = 37
    WHERE = 38
    SATISFYING = 39
    AT = 40
    ON = 41
    DEF = 42
    IF = 43
    ELIF = 44
    ELSE = 45
    FOR = 46
    WHILE = 47
    RETURN = 48
    BREAK = 49
    OPEN_CURLY = 50
    CLOSE_CURLY = 51
    DISTINCT = 52
    PRINT = 53
    DATESTOKEN = 54
    LOADTOKEN = 55
    DUMPTOKEN = 56
    INT = 57
    BOOL = 58
    STRING = 59
    DATE = 60
    TIME = 61
    WS = 62
    VARNAME = 63
    COMMENT_LINE = 64
    COMMENT = 65

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'START DATE'", "'END DATE'", "'CLASS'", "'DAY'", "'CLASSES'", 
            "'DAYS'", "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", "'<'", 
            "'>'", "'<='", "'>='", "'AND'", "'OR'", "'NOT'", "'IN'", "'@'", 
            "'('", "')'", "'['", "']'", "'.'", "','", "':'", "'='", "'COLLECTION OF'", 
            "'ADD'", "'UPDATE'", "'DELETE'", "'GET'", "'WHERE'", "'SATISFYING'", 
            "'AT'", "'ON'", "'DEF'", "'IF'", "'ELIF'", "'ELSE'", "'FOR'", 
            "'WHILE'", "'RETURN'", "'BREAK'", "'{'", "'}'", "'DISTINCT'", 
            "'PRINT'", "'DATES'", "'LOAD'", "'DUMP'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS_ATTRIBUTE", "TYPENAME", "CLASSNAME", "DAYNAME", "CLASSESTOKEN", 
            "DAYSTOKEN", "MULTIPLY", "DIVIDE", "ADD", "SUBTRACT", "EQUAL", 
            "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUAL", 
            "GREATER_THAN_OR_EQUAL", "AND", "OR", "NOT", "IN", "OVERLAP", 
            "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
            "DOT", "COMMA", "COLON", "SINGLEEQUAL", "COLLECTION_OF", "ADD_CANVA", 
            "UPDATE_CANVA", "DELETE_CANVA", "GET_CANVA", "WHERE", "SATISFYING", 
            "AT", "ON", "DEF", "IF", "ELIF", "ELSE", "FOR", "WHILE", "RETURN", 
            "BREAK", "OPEN_CURLY", "CLOSE_CURLY", "DISTINCT", "PRINT", "DATESTOKEN", 
            "LOADTOKEN", "DUMPTOKEN", "INT", "BOOL", "STRING", "DATE", "TIME", 
            "WS", "VARNAME", "COMMENT_LINE", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "CLASS_ATTRIBUTE", "TYPENAME", 
                  "CLASSNAME", "DAYNAME", "CLASSESTOKEN", "DAYSTOKEN", "MULTIPLY", 
                  "DIVIDE", "ADD", "SUBTRACT", "EQUAL", "NOT_EQUAL", "LESS_THAN", 
                  "GREATER_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN_OR_EQUAL", 
                  "AND", "OR", "NOT", "IN", "OVERLAP", "OPEN_PAREN", "CLOSE_PAREN", 
                  "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "COMMA", "COLON", 
                  "SINGLEEQUAL", "COLLECTION_OF", "ADD_CANVA", "UPDATE_CANVA", 
                  "DELETE_CANVA", "GET_CANVA", "WHERE", "SATISFYING", "AT", 
                  "ON", "DEF", "IF", "ELIF", "ELSE", "FOR", "WHILE", "RETURN", 
                  "BREAK", "OPEN_CURLY", "CLOSE_CURLY", "DISTINCT", "PRINT", 
                  "DATESTOKEN", "LOADTOKEN", "DUMPTOKEN", "INT", "BOOL", 
                  "STRING", "DATE", "TIME", "WS", "VARNAME", "COMMENT_LINE", 
                  "COMMENT" ]

    grammarFileName = "Scheduler.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


