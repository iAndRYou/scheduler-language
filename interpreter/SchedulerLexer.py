# Generated from ../Scheduler.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,57,454,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,166,
        8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,3,5,189,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,
        1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,
        1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
        1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
        1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,
        1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,
        1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
        1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,4,48,352,8,48,11,48,12,48,
        353,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,365,8,49,1,
        50,1,50,5,50,369,8,50,10,50,12,50,372,9,50,1,50,1,50,1,51,3,51,377,
        8,51,1,51,1,51,1,51,1,51,1,51,3,51,384,8,51,1,51,1,51,3,51,388,8,
        51,1,51,1,51,1,51,3,51,393,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
        52,1,52,1,52,1,52,3,52,405,8,52,1,52,1,52,1,52,1,52,1,53,4,53,412,
        8,53,11,53,12,53,413,1,53,1,53,1,54,1,54,5,54,420,8,54,10,54,12,
        54,423,9,54,1,55,1,55,1,55,1,55,5,55,429,8,55,10,55,12,55,432,9,
        55,1,55,3,55,435,8,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,5,
        56,445,8,56,10,56,12,56,448,9,56,1,56,1,56,1,56,1,56,1,56,2,430,
        446,0,57,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
        55,111,56,113,57,1,0,11,1,0,48,57,4,0,32,32,48,57,65,90,97,122,1,
        0,49,57,1,0,49,50,1,0,48,49,1,0,48,50,1,0,48,51,1,0,48,53,3,0,9,
        10,13,13,32,32,2,0,65,90,97,122,3,0,48,57,65,90,97,122,474,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
        0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
        0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
        0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
        1,0,0,0,0,113,1,0,0,0,1,115,1,0,0,0,3,117,1,0,0,0,5,123,1,0,0,0,
        7,134,1,0,0,0,9,165,1,0,0,0,11,188,1,0,0,0,13,190,1,0,0,0,15,196,
        1,0,0,0,17,200,1,0,0,0,19,205,1,0,0,0,21,213,1,0,0,0,23,218,1,0,
        0,0,25,220,1,0,0,0,27,222,1,0,0,0,29,224,1,0,0,0,31,226,1,0,0,0,
        33,229,1,0,0,0,35,232,1,0,0,0,37,234,1,0,0,0,39,236,1,0,0,0,41,239,
        1,0,0,0,43,242,1,0,0,0,45,246,1,0,0,0,47,249,1,0,0,0,49,253,1,0,
        0,0,51,256,1,0,0,0,53,258,1,0,0,0,55,260,1,0,0,0,57,262,1,0,0,0,
        59,264,1,0,0,0,61,266,1,0,0,0,63,268,1,0,0,0,65,270,1,0,0,0,67,272,
        1,0,0,0,69,274,1,0,0,0,71,288,1,0,0,0,73,292,1,0,0,0,75,299,1,0,
        0,0,77,306,1,0,0,0,79,310,1,0,0,0,81,316,1,0,0,0,83,320,1,0,0,0,
        85,323,1,0,0,0,87,327,1,0,0,0,89,333,1,0,0,0,91,340,1,0,0,0,93,346,
        1,0,0,0,95,348,1,0,0,0,97,351,1,0,0,0,99,364,1,0,0,0,101,366,1,0,
        0,0,103,383,1,0,0,0,105,404,1,0,0,0,107,411,1,0,0,0,109,417,1,0,
        0,0,111,424,1,0,0,0,113,440,1,0,0,0,115,116,5,59,0,0,116,2,1,0,0,
        0,117,118,5,68,0,0,118,119,5,65,0,0,119,120,5,84,0,0,120,121,5,69,
        0,0,121,122,5,83,0,0,122,4,1,0,0,0,123,124,5,83,0,0,124,125,5,84,
        0,0,125,126,5,65,0,0,126,127,5,82,0,0,127,128,5,84,0,0,128,129,5,
        32,0,0,129,130,5,68,0,0,130,131,5,65,0,0,131,132,5,84,0,0,132,133,
        5,69,0,0,133,6,1,0,0,0,134,135,5,69,0,0,135,136,5,78,0,0,136,137,
        5,68,0,0,137,138,5,32,0,0,138,139,5,68,0,0,139,140,5,65,0,0,140,
        141,5,84,0,0,141,142,5,69,0,0,142,8,1,0,0,0,143,144,5,83,0,0,144,
        145,5,84,0,0,145,146,5,65,0,0,146,147,5,82,0,0,147,166,5,84,0,0,
        148,149,5,69,0,0,149,150,5,78,0,0,150,166,5,68,0,0,151,152,5,83,
        0,0,152,153,5,85,0,0,153,154,5,66,0,0,154,155,5,74,0,0,155,156,5,
        69,0,0,156,157,5,67,0,0,157,166,5,84,0,0,158,159,5,84,0,0,159,160,
        5,69,0,0,160,161,5,65,0,0,161,162,5,67,0,0,162,163,5,72,0,0,163,
        164,5,69,0,0,164,166,5,82,0,0,165,143,1,0,0,0,165,148,1,0,0,0,165,
        151,1,0,0,0,165,158,1,0,0,0,166,10,1,0,0,0,167,168,5,73,0,0,168,
        169,5,78,0,0,169,189,5,84,0,0,170,171,5,66,0,0,171,172,5,79,0,0,
        172,173,5,79,0,0,173,189,5,76,0,0,174,175,5,83,0,0,175,176,5,84,
        0,0,176,177,5,82,0,0,177,178,5,73,0,0,178,179,5,78,0,0,179,189,5,
        71,0,0,180,181,5,68,0,0,181,182,5,65,0,0,182,183,5,84,0,0,183,189,
        5,69,0,0,184,185,5,84,0,0,185,186,5,73,0,0,186,187,5,77,0,0,187,
        189,5,69,0,0,188,167,1,0,0,0,188,170,1,0,0,0,188,174,1,0,0,0,188,
        180,1,0,0,0,188,184,1,0,0,0,189,12,1,0,0,0,190,191,5,67,0,0,191,
        192,5,76,0,0,192,193,5,65,0,0,193,194,5,83,0,0,194,195,5,83,0,0,
        195,14,1,0,0,0,196,197,5,68,0,0,197,198,5,65,0,0,198,199,5,89,0,
        0,199,16,1,0,0,0,200,201,5,87,0,0,201,202,5,69,0,0,202,203,5,69,
        0,0,203,204,5,75,0,0,204,18,1,0,0,0,205,206,5,67,0,0,206,207,5,76,
        0,0,207,208,5,65,0,0,208,209,5,83,0,0,209,210,5,83,0,0,210,211,5,
        69,0,0,211,212,5,83,0,0,212,20,1,0,0,0,213,214,5,68,0,0,214,215,
        5,65,0,0,215,216,5,89,0,0,216,217,5,83,0,0,217,22,1,0,0,0,218,219,
        5,42,0,0,219,24,1,0,0,0,220,221,5,47,0,0,221,26,1,0,0,0,222,223,
        5,43,0,0,223,28,1,0,0,0,224,225,5,45,0,0,225,30,1,0,0,0,226,227,
        5,61,0,0,227,228,5,61,0,0,228,32,1,0,0,0,229,230,5,33,0,0,230,231,
        5,61,0,0,231,34,1,0,0,0,232,233,5,60,0,0,233,36,1,0,0,0,234,235,
        5,62,0,0,235,38,1,0,0,0,236,237,5,60,0,0,237,238,5,61,0,0,238,40,
        1,0,0,0,239,240,5,62,0,0,240,241,5,61,0,0,241,42,1,0,0,0,242,243,
        5,65,0,0,243,244,5,78,0,0,244,245,5,68,0,0,245,44,1,0,0,0,246,247,
        5,79,0,0,247,248,5,82,0,0,248,46,1,0,0,0,249,250,5,78,0,0,250,251,
        5,79,0,0,251,252,5,84,0,0,252,48,1,0,0,0,253,254,5,73,0,0,254,255,
        5,78,0,0,255,50,1,0,0,0,256,257,5,35,0,0,257,52,1,0,0,0,258,259,
        5,40,0,0,259,54,1,0,0,0,260,261,5,41,0,0,261,56,1,0,0,0,262,263,
        5,91,0,0,263,58,1,0,0,0,264,265,5,93,0,0,265,60,1,0,0,0,266,267,
        5,46,0,0,267,62,1,0,0,0,268,269,5,44,0,0,269,64,1,0,0,0,270,271,
        5,58,0,0,271,66,1,0,0,0,272,273,5,61,0,0,273,68,1,0,0,0,274,275,
        5,67,0,0,275,276,5,79,0,0,276,277,5,76,0,0,277,278,5,76,0,0,278,
        279,5,69,0,0,279,280,5,67,0,0,280,281,5,84,0,0,281,282,5,73,0,0,
        282,283,5,79,0,0,283,284,5,78,0,0,284,285,5,32,0,0,285,286,5,79,
        0,0,286,287,5,70,0,0,287,70,1,0,0,0,288,289,5,65,0,0,289,290,5,68,
        0,0,290,291,5,68,0,0,291,72,1,0,0,0,292,293,5,85,0,0,293,294,5,80,
        0,0,294,295,5,68,0,0,295,296,5,65,0,0,296,297,5,84,0,0,297,298,5,
        69,0,0,298,74,1,0,0,0,299,300,5,68,0,0,300,301,5,69,0,0,301,302,
        5,76,0,0,302,303,5,69,0,0,303,304,5,84,0,0,304,305,5,69,0,0,305,
        76,1,0,0,0,306,307,5,71,0,0,307,308,5,69,0,0,308,309,5,84,0,0,309,
        78,1,0,0,0,310,311,5,87,0,0,311,312,5,72,0,0,312,313,5,69,0,0,313,
        314,5,82,0,0,314,315,5,69,0,0,315,80,1,0,0,0,316,317,5,68,0,0,317,
        318,5,69,0,0,318,319,5,70,0,0,319,82,1,0,0,0,320,321,5,73,0,0,321,
        322,5,70,0,0,322,84,1,0,0,0,323,324,5,70,0,0,324,325,5,79,0,0,325,
        326,5,82,0,0,326,86,1,0,0,0,327,328,5,87,0,0,328,329,5,72,0,0,329,
        330,5,73,0,0,330,331,5,76,0,0,331,332,5,69,0,0,332,88,1,0,0,0,333,
        334,5,82,0,0,334,335,5,69,0,0,335,336,5,84,0,0,336,337,5,85,0,0,
        337,338,5,82,0,0,338,339,5,78,0,0,339,90,1,0,0,0,340,341,5,66,0,
        0,341,342,5,82,0,0,342,343,5,69,0,0,343,344,5,65,0,0,344,345,5,75,
        0,0,345,92,1,0,0,0,346,347,5,123,0,0,347,94,1,0,0,0,348,349,5,125,
        0,0,349,96,1,0,0,0,350,352,7,0,0,0,351,350,1,0,0,0,352,353,1,0,0,
        0,353,351,1,0,0,0,353,354,1,0,0,0,354,98,1,0,0,0,355,356,5,84,0,
        0,356,357,5,114,0,0,357,358,5,117,0,0,358,365,5,101,0,0,359,360,
        5,70,0,0,360,361,5,97,0,0,361,362,5,108,0,0,362,363,5,115,0,0,363,
        365,5,101,0,0,364,355,1,0,0,0,364,359,1,0,0,0,365,100,1,0,0,0,366,
        370,5,34,0,0,367,369,7,1,0,0,368,367,1,0,0,0,369,372,1,0,0,0,370,
        368,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,370,1,0,0,0,373,
        374,5,34,0,0,374,102,1,0,0,0,375,377,5,48,0,0,376,375,1,0,0,0,376,
        377,1,0,0,0,377,378,1,0,0,0,378,384,7,2,0,0,379,380,7,3,0,0,380,
        384,7,0,0,0,381,382,5,51,0,0,382,384,7,4,0,0,383,376,1,0,0,0,383,
        379,1,0,0,0,383,381,1,0,0,0,384,385,1,0,0,0,385,392,5,47,0,0,386,
        388,5,48,0,0,387,386,1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,389,
        393,7,2,0,0,390,391,5,49,0,0,391,393,7,5,0,0,392,387,1,0,0,0,392,
        390,1,0,0,0,393,394,1,0,0,0,394,395,5,47,0,0,395,396,7,0,0,0,396,
        397,7,0,0,0,397,398,7,0,0,0,398,399,7,0,0,0,399,104,1,0,0,0,400,
        401,7,4,0,0,401,405,7,0,0,0,402,403,5,50,0,0,403,405,7,6,0,0,404,
        400,1,0,0,0,404,402,1,0,0,0,405,406,1,0,0,0,406,407,5,58,0,0,407,
        408,7,7,0,0,408,409,7,0,0,0,409,106,1,0,0,0,410,412,7,8,0,0,411,
        410,1,0,0,0,412,413,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,
        415,1,0,0,0,415,416,6,53,0,0,416,108,1,0,0,0,417,421,7,9,0,0,418,
        420,7,10,0,0,419,418,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,
        422,1,0,0,0,422,110,1,0,0,0,423,421,1,0,0,0,424,425,5,47,0,0,425,
        426,5,47,0,0,426,430,1,0,0,0,427,429,9,0,0,0,428,427,1,0,0,0,429,
        432,1,0,0,0,430,431,1,0,0,0,430,428,1,0,0,0,431,434,1,0,0,0,432,
        430,1,0,0,0,433,435,5,13,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,
        436,1,0,0,0,436,437,5,10,0,0,437,438,1,0,0,0,438,439,6,55,1,0,439,
        112,1,0,0,0,440,441,5,47,0,0,441,442,5,42,0,0,442,446,1,0,0,0,443,
        445,9,0,0,0,444,443,1,0,0,0,445,448,1,0,0,0,446,447,1,0,0,0,446,
        444,1,0,0,0,447,449,1,0,0,0,448,446,1,0,0,0,449,450,5,42,0,0,450,
        451,5,47,0,0,451,452,1,0,0,0,452,453,6,56,1,0,453,114,1,0,0,0,16,
        0,165,188,353,364,370,376,383,387,392,404,413,421,430,434,446,2,
        6,0,0,0,1,0
    ]

class SchedulerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    CLASS_ATTRIBUTE = 5
    TYPENAME = 6
    CLASSNAME = 7
    DAYNAME = 8
    WEEKNAME = 9
    CLASSESTOKEN = 10
    DAYSTOKEN = 11
    MULTIPLY = 12
    DIVIDE = 13
    ADD = 14
    SUBTRACT = 15
    EQUAL = 16
    NOT_EQUAL = 17
    LESS_THAN = 18
    GREATER_THAN = 19
    LESS_THAN_OR_EQUAL = 20
    GREATER_THAN_OR_EQUAL = 21
    AND = 22
    OR = 23
    NOT = 24
    IN = 25
    OVERLAP = 26
    OPEN_PAREN = 27
    CLOSE_PAREN = 28
    OPEN_BRACKET = 29
    CLOSE_BRACKET = 30
    DOT = 31
    COMMA = 32
    COLON = 33
    SINGLEEQUAL = 34
    COLLECTION_OF = 35
    ADD_CANVA = 36
    UPDATE_CANVA = 37
    DELETE_CANVA = 38
    GET_CANVA = 39
    WHERE = 40
    DEF = 41
    IF = 42
    FOR = 43
    WHILE = 44
    RETURN = 45
    BREAK = 46
    OPEN_CURLY = 47
    CLOSE_CURLY = 48
    INT = 49
    BOOL = 50
    STRING = 51
    DATE = 52
    TIME = 53
    WS = 54
    VARNAME = 55
    COMMENT_LINE = 56
    COMMENT = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'DATES'", "'START DATE'", "'END DATE'", "'CLASS'", "'DAY'", 
            "'WEEK'", "'CLASSES'", "'DAYS'", "'*'", "'/'", "'+'", "'-'", 
            "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'AND'", "'OR'", 
            "'NOT'", "'IN'", "'#'", "'('", "')'", "'['", "']'", "'.'", "','", 
            "':'", "'='", "'COLLECTION OF'", "'ADD'", "'UPDATE'", "'DELETE'", 
            "'GET'", "'WHERE'", "'DEF'", "'IF'", "'FOR'", "'WHILE'", "'RETURN'", 
            "'BREAK'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS_ATTRIBUTE", "TYPENAME", "CLASSNAME", "DAYNAME", "WEEKNAME", 
            "CLASSESTOKEN", "DAYSTOKEN", "MULTIPLY", "DIVIDE", "ADD", "SUBTRACT", 
            "EQUAL", "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUAL", 
            "GREATER_THAN_OR_EQUAL", "AND", "OR", "NOT", "IN", "OVERLAP", 
            "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
            "DOT", "COMMA", "COLON", "SINGLEEQUAL", "COLLECTION_OF", "ADD_CANVA", 
            "UPDATE_CANVA", "DELETE_CANVA", "GET_CANVA", "WHERE", "DEF", 
            "IF", "FOR", "WHILE", "RETURN", "BREAK", "OPEN_CURLY", "CLOSE_CURLY", 
            "INT", "BOOL", "STRING", "DATE", "TIME", "WS", "VARNAME", "COMMENT_LINE", 
            "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "CLASS_ATTRIBUTE", "TYPENAME", 
                  "CLASSNAME", "DAYNAME", "WEEKNAME", "CLASSESTOKEN", "DAYSTOKEN", 
                  "MULTIPLY", "DIVIDE", "ADD", "SUBTRACT", "EQUAL", "NOT_EQUAL", 
                  "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN_OR_EQUAL", 
                  "AND", "OR", "NOT", "IN", "OVERLAP", "OPEN_PAREN", "CLOSE_PAREN", 
                  "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "COMMA", "COLON", 
                  "SINGLEEQUAL", "COLLECTION_OF", "ADD_CANVA", "UPDATE_CANVA", 
                  "DELETE_CANVA", "GET_CANVA", "WHERE", "DEF", "IF", "FOR", 
                  "WHILE", "RETURN", "BREAK", "OPEN_CURLY", "CLOSE_CURLY", 
                  "INT", "BOOL", "STRING", "DATE", "TIME", "WS", "VARNAME", 
                  "COMMENT_LINE", "COMMENT" ]

    grammarFileName = "Scheduler.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


