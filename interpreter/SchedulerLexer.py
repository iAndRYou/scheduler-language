# Generated from ../Scheduler.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,59,475,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,3,4,170,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,197,
        8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,
        17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,
        21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
        26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,
        32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,
        39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,
        42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,
        44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,50,3,50,370,
        8,50,1,50,4,50,373,8,50,11,50,12,50,374,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,386,8,51,1,52,1,52,5,52,390,8,52,10,52,
        12,52,393,9,52,1,52,1,52,1,53,3,53,398,8,53,1,53,1,53,1,53,1,53,
        1,53,3,53,405,8,53,1,53,1,53,3,53,409,8,53,1,53,1,53,1,53,3,53,414,
        8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,3,54,426,
        8,54,1,54,1,54,1,54,1,54,1,55,4,55,433,8,55,11,55,12,55,434,1,55,
        1,55,1,56,1,56,5,56,441,8,56,10,56,12,56,444,9,56,1,57,1,57,1,57,
        1,57,5,57,450,8,57,10,57,12,57,453,9,57,1,57,3,57,456,8,57,1,57,
        1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,466,8,58,10,58,12,58,469,
        9,58,1,58,1,58,1,58,1,58,1,58,2,451,467,0,59,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,
        50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,
        1,0,11,1,0,48,57,4,0,32,32,48,57,65,90,97,122,1,0,49,57,1,0,49,50,
        1,0,48,49,1,0,48,50,1,0,48,51,1,0,48,53,3,0,9,10,13,13,32,32,2,0,
        65,90,97,122,3,0,48,57,65,90,97,122,497,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
        0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,
        0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,1,119,1,0,0,0,3,121,1,0,0,0,5,
        127,1,0,0,0,7,138,1,0,0,0,9,169,1,0,0,0,11,196,1,0,0,0,13,198,1,
        0,0,0,15,204,1,0,0,0,17,208,1,0,0,0,19,213,1,0,0,0,21,221,1,0,0,
        0,23,226,1,0,0,0,25,228,1,0,0,0,27,230,1,0,0,0,29,232,1,0,0,0,31,
        234,1,0,0,0,33,237,1,0,0,0,35,240,1,0,0,0,37,242,1,0,0,0,39,244,
        1,0,0,0,41,247,1,0,0,0,43,250,1,0,0,0,45,254,1,0,0,0,47,257,1,0,
        0,0,49,261,1,0,0,0,51,264,1,0,0,0,53,266,1,0,0,0,55,268,1,0,0,0,
        57,270,1,0,0,0,59,272,1,0,0,0,61,274,1,0,0,0,63,276,1,0,0,0,65,278,
        1,0,0,0,67,280,1,0,0,0,69,282,1,0,0,0,71,296,1,0,0,0,73,300,1,0,
        0,0,75,307,1,0,0,0,77,314,1,0,0,0,79,318,1,0,0,0,81,324,1,0,0,0,
        83,328,1,0,0,0,85,331,1,0,0,0,87,336,1,0,0,0,89,341,1,0,0,0,91,345,
        1,0,0,0,93,351,1,0,0,0,95,358,1,0,0,0,97,364,1,0,0,0,99,366,1,0,
        0,0,101,369,1,0,0,0,103,385,1,0,0,0,105,387,1,0,0,0,107,404,1,0,
        0,0,109,425,1,0,0,0,111,432,1,0,0,0,113,438,1,0,0,0,115,445,1,0,
        0,0,117,461,1,0,0,0,119,120,5,59,0,0,120,2,1,0,0,0,121,122,5,68,
        0,0,122,123,5,65,0,0,123,124,5,84,0,0,124,125,5,69,0,0,125,126,5,
        83,0,0,126,4,1,0,0,0,127,128,5,83,0,0,128,129,5,84,0,0,129,130,5,
        65,0,0,130,131,5,82,0,0,131,132,5,84,0,0,132,133,5,32,0,0,133,134,
        5,68,0,0,134,135,5,65,0,0,135,136,5,84,0,0,136,137,5,69,0,0,137,
        6,1,0,0,0,138,139,5,69,0,0,139,140,5,78,0,0,140,141,5,68,0,0,141,
        142,5,32,0,0,142,143,5,68,0,0,143,144,5,65,0,0,144,145,5,84,0,0,
        145,146,5,69,0,0,146,8,1,0,0,0,147,148,5,83,0,0,148,149,5,84,0,0,
        149,150,5,65,0,0,150,151,5,82,0,0,151,170,5,84,0,0,152,153,5,69,
        0,0,153,154,5,78,0,0,154,170,5,68,0,0,155,156,5,83,0,0,156,157,5,
        85,0,0,157,158,5,66,0,0,158,159,5,74,0,0,159,160,5,69,0,0,160,161,
        5,67,0,0,161,170,5,84,0,0,162,163,5,84,0,0,163,164,5,69,0,0,164,
        165,5,65,0,0,165,166,5,67,0,0,166,167,5,72,0,0,167,168,5,69,0,0,
        168,170,5,82,0,0,169,147,1,0,0,0,169,152,1,0,0,0,169,155,1,0,0,0,
        169,162,1,0,0,0,170,10,1,0,0,0,171,172,5,73,0,0,172,173,5,78,0,0,
        173,197,5,84,0,0,174,175,5,66,0,0,175,176,5,79,0,0,176,177,5,79,
        0,0,177,197,5,76,0,0,178,179,5,83,0,0,179,180,5,84,0,0,180,181,5,
        82,0,0,181,182,5,73,0,0,182,183,5,78,0,0,183,197,5,71,0,0,184,185,
        5,68,0,0,185,186,5,65,0,0,186,187,5,84,0,0,187,197,5,69,0,0,188,
        189,5,84,0,0,189,190,5,73,0,0,190,191,5,77,0,0,191,197,5,69,0,0,
        192,193,5,86,0,0,193,194,5,79,0,0,194,195,5,73,0,0,195,197,5,68,
        0,0,196,171,1,0,0,0,196,174,1,0,0,0,196,178,1,0,0,0,196,184,1,0,
        0,0,196,188,1,0,0,0,196,192,1,0,0,0,197,12,1,0,0,0,198,199,5,67,
        0,0,199,200,5,76,0,0,200,201,5,65,0,0,201,202,5,83,0,0,202,203,5,
        83,0,0,203,14,1,0,0,0,204,205,5,68,0,0,205,206,5,65,0,0,206,207,
        5,89,0,0,207,16,1,0,0,0,208,209,5,87,0,0,209,210,5,69,0,0,210,211,
        5,69,0,0,211,212,5,75,0,0,212,18,1,0,0,0,213,214,5,67,0,0,214,215,
        5,76,0,0,215,216,5,65,0,0,216,217,5,83,0,0,217,218,5,83,0,0,218,
        219,5,69,0,0,219,220,5,83,0,0,220,20,1,0,0,0,221,222,5,68,0,0,222,
        223,5,65,0,0,223,224,5,89,0,0,224,225,5,83,0,0,225,22,1,0,0,0,226,
        227,5,42,0,0,227,24,1,0,0,0,228,229,5,47,0,0,229,26,1,0,0,0,230,
        231,5,43,0,0,231,28,1,0,0,0,232,233,5,45,0,0,233,30,1,0,0,0,234,
        235,5,61,0,0,235,236,5,61,0,0,236,32,1,0,0,0,237,238,5,33,0,0,238,
        239,5,61,0,0,239,34,1,0,0,0,240,241,5,60,0,0,241,36,1,0,0,0,242,
        243,5,62,0,0,243,38,1,0,0,0,244,245,5,60,0,0,245,246,5,61,0,0,246,
        40,1,0,0,0,247,248,5,62,0,0,248,249,5,61,0,0,249,42,1,0,0,0,250,
        251,5,65,0,0,251,252,5,78,0,0,252,253,5,68,0,0,253,44,1,0,0,0,254,
        255,5,79,0,0,255,256,5,82,0,0,256,46,1,0,0,0,257,258,5,78,0,0,258,
        259,5,79,0,0,259,260,5,84,0,0,260,48,1,0,0,0,261,262,5,73,0,0,262,
        263,5,78,0,0,263,50,1,0,0,0,264,265,5,35,0,0,265,52,1,0,0,0,266,
        267,5,40,0,0,267,54,1,0,0,0,268,269,5,41,0,0,269,56,1,0,0,0,270,
        271,5,91,0,0,271,58,1,0,0,0,272,273,5,93,0,0,273,60,1,0,0,0,274,
        275,5,46,0,0,275,62,1,0,0,0,276,277,5,44,0,0,277,64,1,0,0,0,278,
        279,5,58,0,0,279,66,1,0,0,0,280,281,5,61,0,0,281,68,1,0,0,0,282,
        283,5,67,0,0,283,284,5,79,0,0,284,285,5,76,0,0,285,286,5,76,0,0,
        286,287,5,69,0,0,287,288,5,67,0,0,288,289,5,84,0,0,289,290,5,73,
        0,0,290,291,5,79,0,0,291,292,5,78,0,0,292,293,5,32,0,0,293,294,5,
        79,0,0,294,295,5,70,0,0,295,70,1,0,0,0,296,297,5,65,0,0,297,298,
        5,68,0,0,298,299,5,68,0,0,299,72,1,0,0,0,300,301,5,85,0,0,301,302,
        5,80,0,0,302,303,5,68,0,0,303,304,5,65,0,0,304,305,5,84,0,0,305,
        306,5,69,0,0,306,74,1,0,0,0,307,308,5,68,0,0,308,309,5,69,0,0,309,
        310,5,76,0,0,310,311,5,69,0,0,311,312,5,84,0,0,312,313,5,69,0,0,
        313,76,1,0,0,0,314,315,5,71,0,0,315,316,5,69,0,0,316,317,5,84,0,
        0,317,78,1,0,0,0,318,319,5,87,0,0,319,320,5,72,0,0,320,321,5,69,
        0,0,321,322,5,82,0,0,322,323,5,69,0,0,323,80,1,0,0,0,324,325,5,68,
        0,0,325,326,5,69,0,0,326,327,5,70,0,0,327,82,1,0,0,0,328,329,5,73,
        0,0,329,330,5,70,0,0,330,84,1,0,0,0,331,332,5,69,0,0,332,333,5,76,
        0,0,333,334,5,73,0,0,334,335,5,70,0,0,335,86,1,0,0,0,336,337,5,69,
        0,0,337,338,5,76,0,0,338,339,5,83,0,0,339,340,5,69,0,0,340,88,1,
        0,0,0,341,342,5,70,0,0,342,343,5,79,0,0,343,344,5,82,0,0,344,90,
        1,0,0,0,345,346,5,87,0,0,346,347,5,72,0,0,347,348,5,73,0,0,348,349,
        5,76,0,0,349,350,5,69,0,0,350,92,1,0,0,0,351,352,5,82,0,0,352,353,
        5,69,0,0,353,354,5,84,0,0,354,355,5,85,0,0,355,356,5,82,0,0,356,
        357,5,78,0,0,357,94,1,0,0,0,358,359,5,66,0,0,359,360,5,82,0,0,360,
        361,5,69,0,0,361,362,5,65,0,0,362,363,5,75,0,0,363,96,1,0,0,0,364,
        365,5,123,0,0,365,98,1,0,0,0,366,367,5,125,0,0,367,100,1,0,0,0,368,
        370,5,45,0,0,369,368,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,
        373,7,0,0,0,372,371,1,0,0,0,373,374,1,0,0,0,374,372,1,0,0,0,374,
        375,1,0,0,0,375,102,1,0,0,0,376,377,5,84,0,0,377,378,5,114,0,0,378,
        379,5,117,0,0,379,386,5,101,0,0,380,381,5,70,0,0,381,382,5,97,0,
        0,382,383,5,108,0,0,383,384,5,115,0,0,384,386,5,101,0,0,385,376,
        1,0,0,0,385,380,1,0,0,0,386,104,1,0,0,0,387,391,5,34,0,0,388,390,
        7,1,0,0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,
        1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,395,5,34,0,0,395,106,
        1,0,0,0,396,398,5,48,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,
        1,0,0,0,399,405,7,2,0,0,400,401,7,3,0,0,401,405,7,0,0,0,402,403,
        5,51,0,0,403,405,7,4,0,0,404,397,1,0,0,0,404,400,1,0,0,0,404,402,
        1,0,0,0,405,406,1,0,0,0,406,413,5,47,0,0,407,409,5,48,0,0,408,407,
        1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,414,7,2,0,0,411,412,
        5,49,0,0,412,414,7,5,0,0,413,408,1,0,0,0,413,411,1,0,0,0,414,415,
        1,0,0,0,415,416,5,47,0,0,416,417,7,0,0,0,417,418,7,0,0,0,418,419,
        7,0,0,0,419,420,7,0,0,0,420,108,1,0,0,0,421,422,7,4,0,0,422,426,
        7,0,0,0,423,424,5,50,0,0,424,426,7,6,0,0,425,421,1,0,0,0,425,423,
        1,0,0,0,426,427,1,0,0,0,427,428,5,58,0,0,428,429,7,7,0,0,429,430,
        7,0,0,0,430,110,1,0,0,0,431,433,7,8,0,0,432,431,1,0,0,0,433,434,
        1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,437,
        6,55,0,0,437,112,1,0,0,0,438,442,7,9,0,0,439,441,7,10,0,0,440,439,
        1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,114,
        1,0,0,0,444,442,1,0,0,0,445,446,5,47,0,0,446,447,5,47,0,0,447,451,
        1,0,0,0,448,450,9,0,0,0,449,448,1,0,0,0,450,453,1,0,0,0,451,452,
        1,0,0,0,451,449,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,454,456,
        5,13,0,0,455,454,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,458,
        5,10,0,0,458,459,1,0,0,0,459,460,6,57,1,0,460,116,1,0,0,0,461,462,
        5,47,0,0,462,463,5,42,0,0,463,467,1,0,0,0,464,466,9,0,0,0,465,464,
        1,0,0,0,466,469,1,0,0,0,467,468,1,0,0,0,467,465,1,0,0,0,468,470,
        1,0,0,0,469,467,1,0,0,0,470,471,5,42,0,0,471,472,5,47,0,0,472,473,
        1,0,0,0,473,474,6,58,1,0,474,118,1,0,0,0,17,0,169,196,369,374,385,
        391,397,404,408,413,425,434,442,451,455,467,2,6,0,0,0,1,0
    ]

class SchedulerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    CLASS_ATTRIBUTE = 5
    TYPENAME = 6
    CLASSNAME = 7
    DAYNAME = 8
    WEEKNAME = 9
    CLASSESTOKEN = 10
    DAYSTOKEN = 11
    MULTIPLY = 12
    DIVIDE = 13
    ADD = 14
    SUBTRACT = 15
    EQUAL = 16
    NOT_EQUAL = 17
    LESS_THAN = 18
    GREATER_THAN = 19
    LESS_THAN_OR_EQUAL = 20
    GREATER_THAN_OR_EQUAL = 21
    AND = 22
    OR = 23
    NOT = 24
    IN = 25
    OVERLAP = 26
    OPEN_PAREN = 27
    CLOSE_PAREN = 28
    OPEN_BRACKET = 29
    CLOSE_BRACKET = 30
    DOT = 31
    COMMA = 32
    COLON = 33
    SINGLEEQUAL = 34
    COLLECTION_OF = 35
    ADD_CANVA = 36
    UPDATE_CANVA = 37
    DELETE_CANVA = 38
    GET_CANVA = 39
    WHERE = 40
    DEF = 41
    IF = 42
    ELIF = 43
    ELSE = 44
    FOR = 45
    WHILE = 46
    RETURN = 47
    BREAK = 48
    OPEN_CURLY = 49
    CLOSE_CURLY = 50
    INT = 51
    BOOL = 52
    STRING = 53
    DATE = 54
    TIME = 55
    WS = 56
    VARNAME = 57
    COMMENT_LINE = 58
    COMMENT = 59

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'DATES'", "'START DATE'", "'END DATE'", "'CLASS'", "'DAY'", 
            "'WEEK'", "'CLASSES'", "'DAYS'", "'*'", "'/'", "'+'", "'-'", 
            "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'AND'", "'OR'", 
            "'NOT'", "'IN'", "'#'", "'('", "')'", "'['", "']'", "'.'", "','", 
            "':'", "'='", "'COLLECTION OF'", "'ADD'", "'UPDATE'", "'DELETE'", 
            "'GET'", "'WHERE'", "'DEF'", "'IF'", "'ELIF'", "'ELSE'", "'FOR'", 
            "'WHILE'", "'RETURN'", "'BREAK'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS_ATTRIBUTE", "TYPENAME", "CLASSNAME", "DAYNAME", "WEEKNAME", 
            "CLASSESTOKEN", "DAYSTOKEN", "MULTIPLY", "DIVIDE", "ADD", "SUBTRACT", 
            "EQUAL", "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUAL", 
            "GREATER_THAN_OR_EQUAL", "AND", "OR", "NOT", "IN", "OVERLAP", 
            "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
            "DOT", "COMMA", "COLON", "SINGLEEQUAL", "COLLECTION_OF", "ADD_CANVA", 
            "UPDATE_CANVA", "DELETE_CANVA", "GET_CANVA", "WHERE", "DEF", 
            "IF", "ELIF", "ELSE", "FOR", "WHILE", "RETURN", "BREAK", "OPEN_CURLY", 
            "CLOSE_CURLY", "INT", "BOOL", "STRING", "DATE", "TIME", "WS", 
            "VARNAME", "COMMENT_LINE", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "CLASS_ATTRIBUTE", "TYPENAME", 
                  "CLASSNAME", "DAYNAME", "WEEKNAME", "CLASSESTOKEN", "DAYSTOKEN", 
                  "MULTIPLY", "DIVIDE", "ADD", "SUBTRACT", "EQUAL", "NOT_EQUAL", 
                  "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN_OR_EQUAL", 
                  "AND", "OR", "NOT", "IN", "OVERLAP", "OPEN_PAREN", "CLOSE_PAREN", 
                  "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "COMMA", "COLON", 
                  "SINGLEEQUAL", "COLLECTION_OF", "ADD_CANVA", "UPDATE_CANVA", 
                  "DELETE_CANVA", "GET_CANVA", "WHERE", "DEF", "IF", "ELIF", 
                  "ELSE", "FOR", "WHILE", "RETURN", "BREAK", "OPEN_CURLY", 
                  "CLOSE_CURLY", "INT", "BOOL", "STRING", "DATE", "TIME", 
                  "WS", "VARNAME", "COMMENT_LINE", "COMMENT" ]

    grammarFileName = "Scheduler.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


