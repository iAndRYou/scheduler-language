{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Scheduler Language",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#identifiers"
        },
        {
            "include": "#literals"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "identifiers": {
            "patterns": [
                {
                    "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.scheduler-language"
                        }
                    }
                },
                {
                    "name": "variable.scheduler-language",
                    "match": "[a-zA-Z_][a-zA-Z0-9_]*"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.scheduler-language",
                    "match": "\\b(IF|ELSE|ELIF|FOR|WHILE|FOR|RETURN)\\b"
                },
                {
                    "name": "keyword.other.scheduler-language",
                    "match": "\\b(ADD|COLLECTION OF|UPDATE|DELETE|GET|WHERE|START DATE|END DATE|SATISFYING|DISTINCT|ON|PRINT|LOAD|DUMP)\\b"
                },
                {
                    "name": "storage.type.scheduler-language",
                    "match": "\\b(VOID|INT|STRING|BOOL|DATE|TIME)\\b"
                },
                {
                    "name": "entity.name.type.scheduler-language",
                    "match": "\\b(CLASS|DAY|WEEK)\\b"
                },
                {
                    "name": "entity.other.attribute-name.scheduler-language",
                    "match": "\\b(START|END|SUBJECT|TEACHER|CLASSES|DAYS|DATES)\\b"
                },
                {
                    "name": "constant.language.scheduler-language",
                    "match": "\\b(True|False)\\b"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.terminator.statement.scheduler-language",
                    "match": ";"
                },
                {
                    "name": "punctuation.separation.comma.scheduler-language",
                    "match": ","
                },
                {
                    "name": "punctuation.separator.period.scheduler-language",
                    "match": "\\."
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.scheduler-language",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.scheduler-language",
                    "match": "\\\\."
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.scheduler-language",
                    "begin": "/\\*",
                    "end": "\\*/"
                },
                {
                    "name": "comment.line.scheduler-language",
                    "match": "//.+$"
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "name": "constant.language.scheduler-language",
                    "match": "(?:0?[1-9]|[1-2][0-9]|3[0-1])(/)(?:0?[1-9]|1[0-2])(/)(?:[0-9][0-9][0-9][0-9])",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.scheduler-language"
                        },
                        "2": {
                            "name": "punctuation.separator.scheduler-language"
                        }
                    }
                },
                {
                    "name": "constant.language.scheduler-language",
                    "match": "(?:[0-1][0-9]|2[0-3])(:)[0-5][0-9]",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.scheduler-language"
                        }
                    }
                },
                {
                    "name": "constant.numeric.scheduler-language",
                    "match": "-?[0-9]+"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.scheduler-language",
                    "match": "(\\*|/|\\+|-|==|!=|<|>|<=|>=|AND|OR|NOT|IN|@|=)"
                }
            ]
        }
    },
    "scopeName": "source.scheduler"
}
